# -*- coding: utf-8 -*-
"""Final_notebook (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/198f2P4xRkEusku6rtJZqN62x7dncTcQE

# Step 1: Install Requirements
"""

# Commented out IPython magic to ensure Python compatibility.
#clone YOLOv5 and 
!git clone https://github.com/ultralytics/yolov5  # clone repo
# %cd yolov5
# %pip install -qr requirements.txt # install dependencies
# %pip install -q roboflow

import torch
import os
from IPython.display import Image, clear_output  # to display images

print(f"Setup complete. Using torch {torch.__version__} ({torch.cuda.get_device_properties(0).name if torch.cuda.is_available() else 'CPU'})")

from google.colab import drive

drive.mount('/content/gdrive')

!ls "/content/gdrive/My Drive/Colab Notebooks/TrainData"

# set up environment
os.environ["DATASET_DIRECTORY"] = "/content/gdrive/My Drive/Colab Notebooks/TrainData"

# Commented out IPython magic to ensure Python compatibility.
# %%writefile data/pothole.yaml
# train: /content/gdrive/My Drive/Colab Notebooks/TrainData/train/images
# test : /content/gdrive/My Drive/Colab Notebooks/TrainData/test/images
# val: //content/gdrive/My Drive/Colab Notebooks/TrainData/valid/images
# 
# # Classes
# nc: 1  # number of classes
# names: ['pothole']  # class names

#after following the link above, recieve python code with these fields filled in
#from roboflow import Roboflow
#rf = Roboflow(api_key="YOUR API KEY HERE")
#project = rf.workspace().project("YOUR PROJECT")
#dataset = project.version("YOUR VERSION").download("yolov5")

"""# Step 3: Train Our Custom YOLOv5 model

Here, we are able to pass a number of arguments:
- **img:** define input image size
- **batch:** determine batch size
- **epochs:** define the number of training epochs. (Note: often, 3000+ are common here!)
- **data:** Our dataset locaiton is saved in the `dataset.location`
- **weights:** specify a path to weights to start transfer learning from. Here we choose the generic COCO pretrained checkpoint.
- **cache:** cache images for faster training
"""

!python train.py --img 416 --batch 5 --epochs 10 --data data/pothole.yaml --weights yolov5s.pt --cache

from IPython.display import FileLink  
import joblib

"""# Evaluate Custom YOLOv5 Detector Performance
Training losses and performance metrics are saved to Tensorboard and also to a logfile.

If you are new to these metrics, the one you want to focus on is `mAP_0.5` - learn more about mean average precision [here](https://blog.roboflow.com/mean-average-precision/).
"""

# Commented out IPython magic to ensure Python compatibility.
# Start tensorboard
# Launch after you have started training
# logs save in the folder "runs"
# %load_ext tensorboard
# %tensorboard --logdir runs

"""#Run Inference  With Trained Weights
Run inference with a pretrained checkpoint on contents of `test/images` folder downloaded from Roboflow.
"""

!python detect.py --weights /content/yolov5/runs/train/exp/weights/best.pt --img 416 --conf 0.25 --source /content/gdrive/MyDrive/Colab Notebooks/TrainData/valid/images

#display inference on ALL test images

import glob
from IPython.display import Image, display

for imageName in glob.glob('/content/yolov5/runs/detect/exp4/*.jpg'): #assuming JPG
    display(Image(filename=imageName))
    print("\n")

"""# Conclusion and Next Steps

Congratulations! You've trained a custom YOLOv5 model to recognize your custom objects.

To improve you model's performance, we recommend first interating on your datasets coverage and quality. See this guide for [model performance improvement](https://github.com/ultralytics/yolov5/wiki/Tips-for-Best-Training-Results).

To deploy your model to an application, see this guide on [exporting your model to deployment destinations](https://github.com/ultralytics/yolov5/issues/251).

Once your model is in production, you will want to continually iterate and improve on your dataset and model via [active learning](https://blog.roboflow.com/what-is-active-learning/).
"""

#export your model's weights for future use
from google.colab import files
files.download('./runs/train/exp/weights/best.pt')

